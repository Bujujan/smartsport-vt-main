# Generated by Django 4.2.7 on 2025-05-21 13:26

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Utilisateur",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("username", models.CharField(max_length=150, unique=True)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("telephone", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("joueur", "Joueur"),
                            ("organisateur", "Organisateur"),
                            ("administrateur", "Administrateur"),
                            ("arbitre", "Arbitre"),
                        ],
                        max_length=20,
                    ),
                ),
                ("date_inscription", models.DateTimeField(auto_now_add=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Utilisateur",
                "verbose_name_plural": "Utilisateurs",
                "db_table": "utilisateur",
                "ordering": ["-date_inscription"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Equipe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nom", models.CharField(max_length=100, unique=True)),
                ("date_creation", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "equipe",
                "ordering": ["nom"],
            },
        ),
        migrations.CreateModel(
            name="Administrateur",
            fields=[
                (
                    "utilisateur",
                    models.OneToOneField(
                        db_column="id",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Administrateur",
                "verbose_name_plural": "Administrateurs",
                "db_table": "administrateur",
            },
        ),
        migrations.CreateModel(
            name="Arbitre",
            fields=[
                (
                    "utilisateur",
                    models.OneToOneField(
                        db_column="id",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Arbitre",
                "verbose_name_plural": "Arbitres",
                "db_table": "arbitre",
            },
        ),
        migrations.CreateModel(
            name="Joueur",
            fields=[
                (
                    "utilisateur",
                    models.OneToOneField(
                        db_column="id",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "niveau",
                    models.CharField(
                        choices=[
                            ("debutant", "Débutant"),
                            ("intermediaire", "Intermédiaire"),
                            ("avance", "Avancé"),
                            ("expert", "Expert"),
                        ],
                        default="debutant",
                        max_length=20,
                    ),
                ),
                ("classement", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Joueur",
                "verbose_name_plural": "Joueurs",
                "db_table": "joueur",
            },
        ),
        migrations.CreateModel(
            name="Organisateur",
            fields=[
                (
                    "utilisateur",
                    models.OneToOneField(
                        db_column="id",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("nom_organisation", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Organisateur",
                "verbose_name_plural": "Organisateurs",
                "db_table": "organisateur",
            },
        ),
        migrations.CreateModel(
            name="Tournoi",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nom", models.CharField(max_length=100)),
                ("description", models.TextField()),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("elimination", "Élimination simple"),
                            ("round-robin", "Round Robin"),
                            ("mixte", "Format mixte"),
                        ],
                        max_length=20,
                    ),
                ),
                ("regles", models.TextField(blank=True)),
                ("date_debut", models.DateTimeField()),
                ("date_fin", models.DateTimeField()),
                (
                    "prix_inscription",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "statut",
                    models.CharField(
                        choices=[
                            ("planifie", "Planifié"),
                            ("en_cours", "En cours"),
                            ("termine", "Terminé"),
                            ("annule", "Annulé"),
                        ],
                        default="planifie",
                        max_length=20,
                    ),
                ),
                (
                    "organisateur",
                    models.ForeignKey(
                        db_column="organisateur_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tournois.organisateur",
                    ),
                ),
            ],
            options={
                "db_table": "tournoi",
            },
        ),
        migrations.CreateModel(
            name="Rencontre",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nom", models.CharField(blank=True, max_length=100)),
                ("date_heure", models.DateTimeField()),
                (
                    "duree",
                    models.PositiveIntegerField(
                        blank=True, help_text="Durée en minutes", null=True
                    ),
                ),
                ("score1", models.IntegerField(blank=True, null=True)),
                ("score2", models.IntegerField(blank=True, null=True)),
                (
                    "statut",
                    models.CharField(
                        choices=[
                            ("planifie", "Planifié"),
                            ("en_cours", "En cours"),
                            ("termine", "Terminé"),
                            ("annule", "Annulé"),
                            ("reporte", "Reporté"),
                        ],
                        default="planifie",
                        max_length=20,
                    ),
                ),
                ("terrain", models.CharField(blank=True, max_length=100)),
                (
                    "equipe1",
                    models.ForeignKey(
                        db_column="equipe1_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rencontres_equipe1",
                        to="tournois.equipe",
                    ),
                ),
                (
                    "equipe2",
                    models.ForeignKey(
                        db_column="equipe2_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rencontres_equipe2",
                        to="tournois.equipe",
                    ),
                ),
                (
                    "tournoi",
                    models.ForeignKey(
                        db_column="tournoi_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tournois.tournoi",
                    ),
                ),
                (
                    "arbitre",
                    models.ForeignKey(
                        blank=True,
                        db_column="arbitre_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="tournois.arbitre",
                    ),
                ),
            ],
            options={
                "db_table": "rencontre",
            },
        ),
        migrations.CreateModel(
            name="Paiement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "montant",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("date_paiement", models.DateTimeField(auto_now_add=True)),
                (
                    "methode",
                    models.CharField(
                        choices=[
                            ("carte", "Carte bancaire"),
                            ("virement", "Virement bancaire"),
                            ("especes", "Espèces"),
                            ("autre", "Autre"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "statut",
                    models.CharField(
                        choices=[
                            ("en_attente", "En attente"),
                            ("paye", "Payé"),
                            ("refuse", "Refusé"),
                            ("rembourse", "Remboursé"),
                        ],
                        default="en_attente",
                        max_length=20,
                    ),
                ),
                (
                    "joueur",
                    models.ForeignKey(
                        db_column="joueur_id",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="tournois.joueur",
                    ),
                ),
            ],
            options={
                "db_table": "paiement",
                "ordering": ["-date_paiement"],
            },
        ),
        migrations.CreateModel(
            name="JoueurEquipe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_ajout", models.DateTimeField(auto_now_add=True)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("capitaine", "Capitaine"),
                            ("membre", "Membre"),
                            ("remplacant", "Remplaçant"),
                        ],
                        default="membre",
                        max_length=20,
                    ),
                ),
                (
                    "equipe",
                    models.ForeignKey(
                        db_column="equipe_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tournois.equipe",
                    ),
                ),
                (
                    "joueur",
                    models.ForeignKey(
                        db_column="joueur_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tournois.joueur",
                    ),
                ),
            ],
            options={
                "db_table": "joueurequipe",
            },
        ),
        migrations.AddField(
            model_name="equipe",
            name="organisateur",
            field=models.ForeignKey(
                db_column="organisateur_id",
                on_delete=django.db.models.deletion.CASCADE,
                to="tournois.organisateur",
            ),
        ),
        migrations.AddConstraint(
            model_name="tournoi",
            constraint=models.CheckConstraint(
                check=models.Q(("date_fin__gt", models.F("date_debut"))),
                name="check_date_fin_apres_debut",
            ),
        ),
        migrations.AddConstraint(
            model_name="rencontre",
            constraint=models.CheckConstraint(
                check=models.Q(("equipe1", models.F("equipe2")), _negated=True),
                name="check_equipes_differentes",
            ),
        ),
        migrations.AddConstraint(
            model_name="joueurequipe",
            constraint=models.UniqueConstraint(
                fields=("joueur", "equipe"), name="unique_joueur_equipe"
            ),
        ),
    ]
